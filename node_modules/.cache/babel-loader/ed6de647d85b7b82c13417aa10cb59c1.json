{"ast":null,"code":"var _jsxFileName = \"/Users/killiandebuitleir/coding/magnetic-exp/src/components/magneticWrapper.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useLayoutEffect } from \"react\";\nimport gsap, { Power4, Elastic } from \"gsap\";\nimport { useMousePosition } from \"./hooks/useMousePosition\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst onEnter = (item, x, y) => {\n  const magneticPullX = 0.8;\n  const magneticPullY = 0.9;\n  gsap.to(item, {\n    x: x * magneticPullX,\n    y: y * magneticPullY,\n    ease: Power4.easeOut,\n    duration: 0.4\n  });\n};\n\nconst onLeave = item => {\n  gsap.to(item, {\n    x: 0,\n    y: 0,\n    ease: Elastic.easeOut.config(1.1, 0.5),\n    duration: 0.7\n  });\n};\n\nexport default function MagneticWrapper() {\n  _s();\n\n  const ref = useRef(null);\n  const {\n    x,\n    y\n  } = useMousePosition();\n  const [center, setCenter] = useState({\n    x: 0,\n    y: 0\n  });\n  const [isHovering, setIsHovering] = useState(false);\n  const [dimensions, setDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n  useLayoutEffect(() => {\n    const {\n      offsetTop,\n      offsetLeft,\n      offsetWidth,\n      offsetHeight\n    } = ref.current;\n    const x = offsetLeft + offsetWidth / 2;\n    const y = offsetTop + offsetHeight / 2;\n    const width = offsetWidth;\n    const height = offsetHeight;\n    setCenter({\n      x,\n      y\n    });\n    setDimensions({\n      width,\n      height\n    });\n  }, [ref.current]);\n  const dx = x - center.x;\n  const dy = y - center.y;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n  const hoverArea = isHovering ? 7 : 6;\n\n  if (distance < dimensions.width * hoverArea) {\n    if (!isHovering) {\n      setIsHovering(true);\n    }\n\n    onEnter(ref.current, dx, dy);\n  } else {\n    if (isHovering) {\n      onLeave(ref.current);\n      setIsHovering(false);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"MagneticWrapper\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 10\n  }, this);\n}\n\n_s(MagneticWrapper, \"WITj/aNyF/LAL6kGRk3GDGdO74Q=\", false, function () {\n  return [useMousePosition];\n});\n\n_c = MagneticWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"MagneticWrapper\");","map":{"version":3,"sources":["/Users/killiandebuitleir/coding/magnetic-exp/src/components/magneticWrapper.js"],"names":["useState","useRef","useLayoutEffect","gsap","Power4","Elastic","useMousePosition","onEnter","item","x","y","magneticPullX","magneticPullY","to","ease","easeOut","duration","onLeave","config","MagneticWrapper","ref","center","setCenter","isHovering","setIsHovering","dimensions","setDimensions","width","height","offsetTop","offsetLeft","offsetWidth","offsetHeight","current","dx","dy","distance","Math","sqrt","hoverArea"],"mappings":"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","sourcesContent":["import { useState, useRef, useLayoutEffect } from \"react\";\nimport gsap, { Power4, Elastic } from \"gsap\";\nimport { useMousePosition } from \"./hooks/useMousePosition\";\n\nconst onEnter = (item, x, y) => {\n  const magneticPullX = 0.8;\n  const magneticPullY = 0.9;\n  gsap.to(item, {\n    x: x * magneticPullX,\n    y: y * magneticPullY,\n    ease: Power4.easeOut,\n    duration: 0.4,\n  });\n};\n\nconst onLeave = (item) => {\n  gsap.to(item, {\n    x: 0,\n    y: 0,\n    ease: Elastic.easeOut.config(1.1, 0.5),\n    duration: 0.7,\n  });\n};\n\nexport default function MagneticWrapper() {\n  const ref = useRef(null);\n  const { x, y } = useMousePosition();\n  const [center, setCenter] = useState({ x: 0, y: 0 });\n  const [isHovering, setIsHovering] = useState(false);\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n\n  useLayoutEffect(() => {\n    const { offsetTop, offsetLeft, offsetWidth, offsetHeight } = ref.current;\n    const x = offsetLeft + offsetWidth / 2;\n    const y = offsetTop + offsetHeight / 2;\n    const width = offsetWidth;\n    const height = offsetHeight;\n\n    setCenter({ x, y });\n    setDimensions({ width, height });\n  }, [ref.current]);\n\n  const dx = x - center.x;\n  const dy = y - center.y;\n\n  const distance = Math.sqrt(dx * dx + dy * dy);\n  const hoverArea = isHovering ? 7 : 6;\n  if (distance < dimensions.width * hoverArea) {\n    if (!isHovering) {\n      setIsHovering(true);\n    }\n    onEnter(ref.current, dx, dy);\n  } else {\n    if (isHovering) {\n      onLeave(ref.current);\n      setIsHovering(false);\n    }\n  }\n  return <div>MagneticWrapper</div>;\n}\n"]},"metadata":{},"sourceType":"module"}